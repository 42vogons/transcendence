import Head from 'next/head'
import Image from 'next/image'

import {
	ChatContainer,
	ChatHeader,
	ChatHeaderTextContainer,
	ChatMenu,
	ChatMenuWrapper,
	ChatMessage,
	ChatMessageContainer,
	ChatMessageTimestamp,
	// ChatSubTitle,
	ChatTitle,
	MenuAction,
	MenuPortal,
	SenderMenu,
	SenderMenuWrapper,
} from '@/styles/pages/chat'

import { SlOptionsVertical } from 'react-icons/sl'

import { ReactElement, useContext, useEffect, useRef, useState } from 'react'
import Layout from '@/components/layout'
import {
	MenuArrow,
	MenuContent,
	MenuItem,
} from '@/styles/components/friendListItem'
import { FaGamepad, FaUserAstronaut, FaUserPlus } from 'react-icons/fa6'
import { GrUpdate } from 'react-icons/gr'
import { UserContext } from '@/contexts/UserContext'
import { useRouter } from 'next/router'
import { ChatContext } from '@/contexts/ChatContext'
import { iChannelMessage } from '@/reducers/Chat/Types'
import ChatInput from '@/components/ChatInput'
import MessageContainer from '@/components/messageContainer'
import { toast } from 'react-toastify'
import { BiExit, BiLogOut, BiShieldPlus, BiVolumeMute } from 'react-icons/bi'
import { MdBlock } from 'react-icons/md'
import ConfirmationModal from '@/components/modals/confirmationModal'
import AddUserToChannelModal from '@/components/modals/addUserToChannelModal'
import { GameContext } from '@/contexts/GameContext'

export default function Chat() {
	const [showLeaveChannelModal, setShowLeaveChannelModal] = useState(false)
	const [showAddUserToChannelModal, setShowAddUserToChannelModal] =
		useState(false)
	const messagesEndRef = useRef(null)
	const menuIconSize = 26
	const broadCastID = 1
	const { user } = useContext(UserContext)
	const { requestMatch } = useContext(GameContext)
	const {
		activeChannel,
		activeChannelData,
		getUsernameFromChannelMembers,
		getActiveChannelName,
		getActiveChannelAvatar,
		setActiveChannel,
		hasAdminPriveleges,
	} = useContext(ChatContext)

	const messages = activeChannelData?.msgs
	const router = useRouter()

	const loggedUserID = user?.userID

	function scrollToBottom(behavior: 'smooth' | 'instant' = 'instant') {
		// eslint-disable-next-line prettier/prettier
		(messagesEndRef.current as unknown as HTMLElement)?.scrollIntoView({
			behavior,
		})
	}

	function leaveChannel(channelID: number) {
		console.log('leave', channelID)
	}

	function muteUser(userID: number) {
		console.log('mute', userID)
	}

	function ChannelPromoteUser(channelID: number, userID: number) {
		console.log('promote', channelID, userID)
	}

	function ChannelKickUser(channelID: number, userID: number) {
		console.log('kick', channelID, userID)
	}

	function ChannelBanUser(channelID: number, userID: number) {
		console.log('ban', channelID, userID)
	}

	useEffect(() => {
		const { channelID } = router.query
		console.log('channelID:', channelID)
		if (router.isReady) {
			if (typeof channelID === 'undefined' || !isNaN(Number(channelID))) {
				setActiveChannel(Number(channelID))
			} else {
				toast('Invalid channel id', {
					type: 'error',
				})
			}
		}
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [router.query, router.isReady])

	useEffect(() => {
		if (activeChannelData) {
			scrollToBottom()
		}
	}, [activeChannelData])

	return (
		<>
			<Head>
				<title>Transcendence - Pong</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<ChatContainer>
				{activeChannelData ? (
					<>
						<ChatHeader>
							<ChatHeaderTextContainer>
								<Image
									src={getActiveChannelAvatar(
										activeChannelData.channel.type,
										activeChannelData.channelMembers,
									)}
									width={40}
									height={40}
									alt="user"
								/>
								<ChatTitle>
									{getActiveChannelName(
										activeChannelData.channel.name,
										activeChannelData.channel.type,
										activeChannelData.channelMembers,
									)}
								</ChatTitle>
								{/* <ChatSubTitle>online</ChatSubTitle> */}
							</ChatHeaderTextContainer>
							{activeChannelData.channel.type !== 'direct' && (
								<ChatMenuWrapper>
									<ChatMenu>
										<SlOptionsVertical size={28} />
									</ChatMenu>
									<MenuPortal>
										<MenuContent
											style={{
												zIndex: 1,
											}}
										>
											<MenuArrow />
											<MenuItem>
												<MenuAction
													onClick={() => {
														setShowLeaveChannelModal(
															true,
														)
													}}
												>
													<BiExit
														size={menuIconSize}
													/>
													Channel
												</MenuAction>
											</MenuItem>
											{hasAdminPriveleges(
												Number(user?.userID),
											) && (
												<>
													<MenuItem>
														<MenuAction
															isAdmin="true"
															onClick={() => {
																setShowAddUserToChannelModal(
																	true,
																)
															}}
														>
															<FaUserPlus
																size={
																	menuIconSize
																}
															/>
															Member
														</MenuAction>
													</MenuItem>
													<MenuItem>
														<MenuAction
															isAdmin="true"
															onClick={() => {
																console.log(
																	'change password',
																)
															}}
														>
															<GrUpdate
																size={
																	menuIconSize
																}
															/>{' '}
															Password
														</MenuAction>
													</MenuItem>
												</>
											)}
										</MenuContent>
									</MenuPortal>
								</ChatMenuWrapper>
							)}
						</ChatHeader>
						<ChatMessageContainer>
							{messages && messages?.length > 0 ? (
								messages.map((message: iChannelMessage) => (
									<ChatMessage
										key={message.message_id}
										userType={
											message.sender_id === loggedUserID
												? 'logged'
												: message.sender_id ===
												    broadCastID
												  ? 'broadcast'
												  : 'other'
										}
									>
										{message.sender_id !== broadCastID &&
											message.sender_id !==
												loggedUserID && (
												<SenderMenuWrapper>
													<SenderMenu>
														<FaUserAstronaut
															size={28}
														/>
														{getUsernameFromChannelMembers(
															message.sender_id,
														)}
													</SenderMenu>
													<MenuPortal>
														<MenuContent
															style={{
																zIndex: 1,
															}}
														>
															<MenuArrow />
															<MenuItem>
																<MenuAction
																	onClick={() => {
																		requestMatch(
																			message.sender_id,
																		)
																		router.push(
																			'/',
																		)
																		toast(
																			`You invited ${getUsernameFromChannelMembers(
																				message.sender_id,
																			)} to play`,
																			{
																				type: 'info',
																			},
																		)
																	}}
																>
																	<FaGamepad
																		size={
																			menuIconSize
																		}
																	/>{' '}
																	Play
																</MenuAction>
															</MenuItem>
															<MenuItem>
																<MenuAction
																	onClick={() => {
																		router.push(
																			`/profile/${message.sender_id}`,
																		)
																	}}
																>
																	<FaUserAstronaut
																		size={
																			menuIconSize
																		}
																	/>
																	Profile
																</MenuAction>
															</MenuItem>
															<MenuItem>
																<MenuAction
																	onClick={() => {
																		muteUser(
																			message.sender_id,
																		)
																	}}
																>
																	<BiVolumeMute
																		size={
																			menuIconSize
																		}
																	/>
																	Mute
																</MenuAction>
															</MenuItem>
															{activeChannelData
																.channel
																.type !==
																'direct' &&
																hasAdminPriveleges(
																	Number(
																		user?.userID,
																	),
																) && (
																	<>
																		<MenuItem>
																			<MenuAction
																				isAdmin="true"
																				onClick={() => {
																					ChannelPromoteUser(
																						message.channel_id,
																						message.sender_id,
																					)
																				}}
																			>
																				<BiShieldPlus
																					size={
																						menuIconSize
																					}
																				/>
																				Promote
																			</MenuAction>
																		</MenuItem>

																		<MenuItem>
																			<MenuAction
																				isAdmin="true"
																				onClick={() => {
																					ChannelKickUser(
																						message.channel_id,
																						message.sender_id,
																					)
																				}}
																			>
																				<BiLogOut
																					size={
																						menuIconSize
																					}
																				/>
																				Kick
																			</MenuAction>
																		</MenuItem>
																		<MenuItem>
																			<MenuAction
																				isAdmin="true"
																				onClick={() => {
																					ChannelBanUser(
																						message.channel_id,
																						message.sender_id,
																					)
																				}}
																			>
																				<MdBlock
																					size={
																						menuIconSize
																					}
																				/>
																				Ban
																			</MenuAction>
																		</MenuItem>
																	</>
																)}
														</MenuContent>
													</MenuPortal>
												</SenderMenuWrapper>
											)}
										<p>{message.content}</p>
										<ChatMessageTimestamp
											userType={
												message.sender_id !==
												broadCastID
													? 'user'
													: 'broadcast'
											}
										>
											{`@ ${new Date(message.timestamp)
												.toLocaleString('en-CA', {
													hourCycle: 'h23',
													hour: '2-digit',
													minute: '2-digit',
													second: '2-digit',
													year: 'numeric',
													month: '2-digit',
													day: '2-digit',
												})
												.replace(',', ' ')}`}
										</ChatMessageTimestamp>
									</ChatMessage>
								))
							) : (
								<MessageContainer>
									<h2>No messages yet</h2>
								</MessageContainer>
							)}
							<div ref={messagesEndRef} />
						</ChatMessageContainer>
						<ChatInput
							channel_id={activeChannelData.channel.channel_id}
						/>
						<ConfirmationModal
							setShowConfirmationModal={setShowLeaveChannelModal}
							showConfirmationModal={showLeaveChannelModal}
							title={
								`Channel ${activeChannelData?.channel.name}` ||
								''
							}
							message="Are you sure o want to leave this Channel?"
							onConfirmation={() =>
								leaveChannel(
									activeChannelData?.channel.channel_id,
								)
							}
						/>
						<AddUserToChannelModal
							setShowAddUserToChannelModal={
								setShowAddUserToChannelModal
							}
							showAddUserToChannelModal={
								showAddUserToChannelModal
							}
						/>
					</>
				) : (
					<MessageContainer>
						{!activeChannel &&
						router.isReady &&
						typeof router.query.channelID === 'undefined' ? (
							<h2>Select a channel</h2>
						) : (
							<h2>Invalid channel</h2>
						)}
					</MessageContainer>
				)}
			</ChatContainer>
		</>
	)
}

Chat.getLayout = (page: ReactElement) => {
	return <Layout>{page}</Layout>
}
